% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read.R
\name{wb_to_df}
\alias{wb_to_df}
\alias{read_xlsx}
\alias{wb_read}
\title{Create Dataframe from Workbook}
\usage{
wb_to_df(
  xlsx_file,
  sheet,
  start_row = 1,
  start_col = NULL,
  row_names = FALSE,
  col_names = TRUE,
  skip_empty_rows = FALSE,
  skip_empty_cols = FALSE,
  skip_hidden_rows = FALSE,
  skip_hidden_cols = FALSE,
  rows = NULL,
  cols = NULL,
  detect_dates = TRUE,
  na.strings = "#N/A",
  na.numbers = NA,
  fill_merged_cells = FALSE,
  dims,
  show_formula = FALSE,
  convert = TRUE,
  types,
  named_region,
  keep_attributes = FALSE,
  ...
)

read_xlsx(
  xlsx_file,
  sheet,
  start_row = 1,
  start_col = NULL,
  row_names = FALSE,
  col_names = TRUE,
  skip_empty_rows = FALSE,
  skip_empty_cols = FALSE,
  rows = NULL,
  cols = NULL,
  detect_dates = TRUE,
  named_region,
  na.strings = "#N/A",
  na.numbers = NA,
  check.names = FALSE,
  sep.names = ".",
  fill_merged_cells = FALSE,
  ...
)

wb_read(
  xlsx_file,
  sheet = 1,
  start_row = 1,
  start_col = NULL,
  row_names = FALSE,
  col_names = TRUE,
  skip_empty_rows = FALSE,
  skip_empty_cols = FALSE,
  rows = NULL,
  cols = NULL,
  detect_dates = TRUE,
  named_region,
  na.strings = "NA",
  na.numbers = NA,
  ...
)
}
\arguments{
\item{xlsx_file}{An xlsx file, Workbook object or URL to xlsx file.}

\item{sheet}{Either sheet name or index. When missing the first sheet in the workbook is selected.}

\item{start_row}{first row to begin looking for data.}

\item{start_col}{first column to begin looking for data.}

\item{row_names}{If TRUE, the first col of data will be used as row names.}

\item{col_names}{If TRUE, the first row of data will be used as column names.}

\item{skip_empty_rows}{If TRUE, empty rows are skipped.}

\item{skip_empty_cols}{If TRUE, empty columns are skipped.}

\item{skip_hidden_rows}{If TRUE, hidden rows are skipped.}

\item{skip_hidden_cols}{If TRUE, hidden columns are skipped.}

\item{rows}{A numeric vector specifying which rows in the Excel file to read. If NULL, all rows are read.}

\item{cols}{A numeric vector specifying which columns in the Excel file to read. If NULL, all columns are read.}

\item{detect_dates}{If TRUE, attempt to recognize dates and perform conversion.}

\item{na.strings}{A character vector of strings which are to be interpreted as NA. Blank cells will be returned as NA.}

\item{na.numbers}{A numeric vector of digits which are to be interpreted as NA. Blank cells will be returned as NA.}

\item{fill_merged_cells}{If TRUE, the value in a merged cell is given to all cells within the merge.}

\item{dims}{Character string of type "A1:B2" as optional dimensions to be imported.}

\item{show_formula}{If TRUE, the underlying Excel formulas are shown.}

\item{convert}{If TRUE, a conversion to dates and numerics is attempted.}

\item{types}{A named numeric indicating, the type of the data. 0: character, 1: numeric, 2: date, 3: posixt, 4:logical. Names must match the returned data}

\item{named_region}{Character string with a named_region (defined name or table). If no sheet is selected, the first appearance will be selected.}

\item{keep_attributes}{If TRUE additional attributes are returned. (These are used internally to define a cell type.)}

\item{...}{additional arguments}
}
\description{
Simple function to create a dataframe from a workbook. Simple as in simply
written down. \code{\link[=read_xlsx]{read_xlsx()}} and \code{\link[=wb_read]{wb_read()}} are just internal wrappers for
\code{\link[=wb_to_df]{wb_to_df()}} intended for people coming from other packages.
}
\details{
Depending if the R package \code{hms} is loaded, \code{wb_to_df()} returns \code{hms} variables or string variables in the \code{hh:mm:ss} format.

Formulae written using write_formula to a Workbook object will not get picked up by read_xlsx().
This is because only the formula is written and left to be evaluated when the file is opened in Excel.
Opening, saving and closing the file with Excel will resolve this.
}
\examples{

  ###########################################################################
  # numerics, dates, missings, bool and string
  xlsxFile <- system.file("extdata", "openxlsx2_example.xlsx", package = "openxlsx2")
  wb1 <- wb_load(xlsxFile)

  # import workbook
  wb_to_df(wb1)

  # do not convert first row to colNames
  wb_to_df(wb1, colNames = FALSE)

  # do not try to identify dates in the data
  wb_to_df(wb1, detectDates = FALSE)

  # return the underlying Excel formula instead of their values
  wb_to_df(wb1, showFormula = TRUE)

  # read dimension without colNames
  wb_to_df(wb1, dims = "A2:C5", colNames = FALSE)

  # read selected cols
  wb_to_df(wb1, cols = c("A:B", "G"))

  # read selected rows
  wb_to_df(wb1, rows = c(2, 4, 6))

  # convert characters to numerics and date (logical too?)
  wb_to_df(wb1, convert = FALSE)

  # erase empty rows from dataset
  wb_to_df(wb1, skipEmptyRows = TRUE)

  # erase empty columns from dataset
  wb_to_df(wb1, skipEmptyCols = TRUE)

  # convert first row to rownames
  wb_to_df(wb1, sheet = 2, dims = "C6:G9", rowNames = TRUE)

  # define type of the data.frame
  wb_to_df(wb1, cols = c(2, 5), types = c("Var1" = 0, "Var3" = 1))

  # start in row 5
  wb_to_df(wb1, startRow = 5, colNames = FALSE)

  # na string
  wb_to_df(wb1, na.strings = "a")

  ###########################################################################
  # named_region // namedRegion
  xlsxFile <- system.file("extdata", "namedRegions3.xlsx", package = "openxlsx2")
  wb2 <- wb_load(xlsxFile)

  # read dataset with named_region (returns global first)
  wb_to_df(wb2, named_region = "MyRange", colNames = FALSE)

  # read named_region from sheet
  wb_to_df(wb2, named_region = "MyRange", sheet = 4, colNames = FALSE)

  # read_xlsx
  xlsxFile <- system.file("extdata", "openxlsx2_example.xlsx", package = "openxlsx2")
  read_xlsx(xlsxFile = xlsxFile)

  # wb_read
  xlsxFile <- system.file("extdata", "openxlsx2_example.xlsx", package = "openxlsx2")
  df1 <- wb_read(xlsxFile = xlsxFile, sheet = 1)

  xlsxFile <- system.file("extdata", "openxlsx2_example.xlsx", package = "openxlsx2")
  df1 <- wb_read(xlsxFile = xlsxFile, sheet = 1, rows = c(1, 3, 5), cols = 1:3)
}
\seealso{
\code{\link[=wb_get_named_regions]{wb_get_named_regions()}}
}
