// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "openxlsx2_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// readXML
SEXP readXML(std::string path, bool isfile);
RcppExport SEXP _openxlsx2_readXML(SEXP pathSEXP, SEXP isfileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< bool >::type isfile(isfileSEXP);
    rcpp_result_gen = Rcpp::wrap(readXML(path, isfile));
    return rcpp_result_gen;
END_RCPP
}
// getXML1
SEXP getXML1(std::string str, std::string child);
RcppExport SEXP _openxlsx2_getXML1(SEXP strSEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXML1(str, child));
    return rcpp_result_gen;
END_RCPP
}
// getXML1val
SEXP getXML1val(std::string str, std::string child);
RcppExport SEXP _openxlsx2_getXML1val(SEXP strSEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXML1val(str, child));
    return rcpp_result_gen;
END_RCPP
}
// getXML2
SEXP getXML2(std::string str, std::string level1, std::string child);
RcppExport SEXP _openxlsx2_getXML2(SEXP strSEXP, SEXP level1SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXML2(str, level1, child));
    return rcpp_result_gen;
END_RCPP
}
// getXML2val
SEXP getXML2val(std::string str, std::string level1, std::string child);
RcppExport SEXP _openxlsx2_getXML2val(SEXP strSEXP, SEXP level1SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXML2val(str, level1, child));
    return rcpp_result_gen;
END_RCPP
}
// getXML3
SEXP getXML3(std::string str, std::string level1, std::string level2, std::string child);
RcppExport SEXP _openxlsx2_getXML3(SEXP strSEXP, SEXP level1SEXP, SEXP level2SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type level2(level2SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXML3(str, level1, level2, child));
    return rcpp_result_gen;
END_RCPP
}
// getXML3val
SEXP getXML3val(std::string str, std::string level1, std::string level2, std::string child);
RcppExport SEXP _openxlsx2_getXML3val(SEXP strSEXP, SEXP level1SEXP, SEXP level2SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type level2(level2SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXML3val(str, level1, level2, child));
    return rcpp_result_gen;
END_RCPP
}
// getXMLattr
SEXP getXMLattr(std::vector<std::string> strs, std::string child);
RcppExport SEXP _openxlsx2_getXMLattr(SEXP strsSEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type strs(strsSEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLattr(strs, child));
    return rcpp_result_gen;
END_RCPP
}
// getXML1attr_one
SEXP getXML1attr_one(std::string str, std::string child, std::string attr);
RcppExport SEXP _openxlsx2_getXML1attr_one(SEXP strSEXP, SEXP childSEXP, SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(getXML1attr_one(str, child, attr));
    return rcpp_result_gen;
END_RCPP
}
// calc_column_widths
SEXP calc_column_widths(Rcpp::Reference sheet_data, std::vector<std::string> sharedStrings, Rcpp::IntegerVector autoColumns, Rcpp::NumericVector widths, float baseFontCharWidth, float minW, float maxW);
RcppExport SEXP _openxlsx2_calc_column_widths(SEXP sheet_dataSEXP, SEXP sharedStringsSEXP, SEXP autoColumnsSEXP, SEXP widthsSEXP, SEXP baseFontCharWidthSEXP, SEXP minWSEXP, SEXP maxWSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Reference >::type sheet_data(sheet_dataSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sharedStrings(sharedStringsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type autoColumns(autoColumnsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type widths(widthsSEXP);
    Rcpp::traits::input_parameter< float >::type baseFontCharWidth(baseFontCharWidthSEXP);
    Rcpp::traits::input_parameter< float >::type minW(minWSEXP);
    Rcpp::traits::input_parameter< float >::type maxW(maxWSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_column_widths(sheet_data, sharedStrings, autoColumns, widths, baseFontCharWidth, minW, maxW));
    return rcpp_result_gen;
END_RCPP
}
// convert_to_excel_ref
SEXP convert_to_excel_ref(Rcpp::IntegerVector cols, std::vector<std::string> LETTERS);
RcppExport SEXP _openxlsx2_convert_to_excel_ref(SEXP colsSEXP, SEXP LETTERSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type LETTERS(LETTERSSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_to_excel_ref(cols, LETTERS));
    return rcpp_result_gen;
END_RCPP
}
// convert_from_excel_ref
Rcpp::IntegerVector convert_from_excel_ref(Rcpp::CharacterVector x);
RcppExport SEXP _openxlsx2_convert_from_excel_ref(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_from_excel_ref(x));
    return rcpp_result_gen;
END_RCPP
}
// convert_to_excel_ref_expand
SEXP convert_to_excel_ref_expand(const std::vector<int>& cols, const std::vector<std::string>& LETTERS, const std::vector<std::string>& rows);
RcppExport SEXP _openxlsx2_convert_to_excel_ref_expand(SEXP colsSEXP, SEXP LETTERSSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type LETTERS(LETTERSSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_to_excel_ref_expand(cols, LETTERS, rows));
    return rcpp_result_gen;
END_RCPP
}
// isInternalHyperlink
Rcpp::LogicalVector isInternalHyperlink(Rcpp::CharacterVector x);
RcppExport SEXP _openxlsx2_isInternalHyperlink(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isInternalHyperlink(x));
    return rcpp_result_gen;
END_RCPP
}
// cppReadFile
std::string cppReadFile(std::string xmlFile);
RcppExport SEXP _openxlsx2_cppReadFile(SEXP xmlFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type xmlFile(xmlFileSEXP);
    rcpp_result_gen = Rcpp::wrap(cppReadFile(xmlFile));
    return rcpp_result_gen;
END_RCPP
}
// read_file_newline
std::string read_file_newline(std::string xmlFile);
RcppExport SEXP _openxlsx2_read_file_newline(SEXP xmlFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type xmlFile(xmlFileSEXP);
    rcpp_result_gen = Rcpp::wrap(read_file_newline(xmlFile));
    return rcpp_result_gen;
END_RCPP
}
// get_letters
std::vector<std::string> get_letters();
RcppExport SEXP _openxlsx2_get_letters() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_letters());
    return rcpp_result_gen;
END_RCPP
}
// markUTF8
Rcpp::CharacterVector markUTF8(Rcpp::CharacterVector x, bool clone);
RcppExport SEXP _openxlsx2_markUTF8(SEXP xSEXP, SEXP cloneSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type clone(cloneSEXP);
    rcpp_result_gen = Rcpp::wrap(markUTF8(x, clone));
    return rcpp_result_gen;
END_RCPP
}
// loadvals
void loadvals(Rcpp::Reference wb, XPtrXML doc);
RcppExport SEXP _openxlsx2_loadvals(SEXP wbSEXP, SEXP docSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Reference >::type wb(wbSEXP);
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    loadvals(wb, doc);
    return R_NilValue;
END_RCPP
}
// si_to_txt
SEXP si_to_txt(XPtrXML doc);
RcppExport SEXP _openxlsx2_si_to_txt(SEXP docSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    rcpp_result_gen = Rcpp::wrap(si_to_txt(doc));
    return rcpp_result_gen;
END_RCPP
}
// is_to_txt
SEXP is_to_txt(Rcpp::CharacterVector is_vec);
RcppExport SEXP _openxlsx2_is_to_txt(SEXP is_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type is_vec(is_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(is_to_txt(is_vec));
    return rcpp_result_gen;
END_RCPP
}
// long_to_wide
void long_to_wide(Rcpp::DataFrame z, Rcpp::DataFrame tt, Rcpp::DataFrame cc, Rcpp::List dn);
RcppExport SEXP _openxlsx2_long_to_wide(SEXP zSEXP, SEXP ttSEXP, SEXP ccSEXP, SEXP dnSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type z(zSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type tt(ttSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dn(dnSEXP);
    long_to_wide(z, tt, cc, dn);
    return R_NilValue;
END_RCPP
}
// getOpenClosedNode
SEXP getOpenClosedNode(std::string xml, std::string open_tag, std::string close_tag);
RcppExport SEXP _openxlsx2_getOpenClosedNode(SEXP xmlSEXP, SEXP open_tagSEXP, SEXP close_tagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type xml(xmlSEXP);
    Rcpp::traits::input_parameter< std::string >::type open_tag(open_tagSEXP);
    Rcpp::traits::input_parameter< std::string >::type close_tag(close_tagSEXP);
    rcpp_result_gen = Rcpp::wrap(getOpenClosedNode(xml, open_tag, close_tag));
    return rcpp_result_gen;
END_RCPP
}
// getAttr
SEXP getAttr(Rcpp::CharacterVector x, std::string tag);
RcppExport SEXP _openxlsx2_getAttr(SEXP xSEXP, SEXP tagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type tag(tagSEXP);
    rcpp_result_gen = Rcpp::wrap(getAttr(x, tag));
    return rcpp_result_gen;
END_RCPP
}
// get_extLst_Major
Rcpp::CharacterVector get_extLst_Major(std::string xml);
RcppExport SEXP _openxlsx2_get_extLst_Major(SEXP xmlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type xml(xmlSEXP);
    rcpp_result_gen = Rcpp::wrap(get_extLst_Major(xml));
    return rcpp_result_gen;
END_RCPP
}
// cell_ref_to_col
int cell_ref_to_col(std::string x);
RcppExport SEXP _openxlsx2_cell_ref_to_col(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cell_ref_to_col(x));
    return rcpp_result_gen;
END_RCPP
}
// int_2_cell_ref
Rcpp::CharacterVector int_2_cell_ref(Rcpp::IntegerVector cols);
RcppExport SEXP _openxlsx2_int_2_cell_ref(SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(int_2_cell_ref(cols));
    return rcpp_result_gen;
END_RCPP
}
// readXMLPtr
SEXP readXMLPtr(std::string path, bool isfile);
RcppExport SEXP _openxlsx2_readXMLPtr(SEXP pathSEXP, SEXP isfileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< bool >::type isfile(isfileSEXP);
    rcpp_result_gen = Rcpp::wrap(readXMLPtr(path, isfile));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr1
SEXP getXMLXPtr1(XPtrXML doc, std::string child);
RcppExport SEXP _openxlsx2_getXMLXPtr1(SEXP docSEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr1(doc, child));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr2
SEXP getXMLXPtr2(XPtrXML doc, std::string level1, std::string child);
RcppExport SEXP _openxlsx2_getXMLXPtr2(SEXP docSEXP, SEXP level1SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr2(doc, level1, child));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr3
SEXP getXMLXPtr3(XPtrXML doc, std::string level1, std::string level2, std::string child);
RcppExport SEXP _openxlsx2_getXMLXPtr3(SEXP docSEXP, SEXP level1SEXP, SEXP level2SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type level2(level2SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr3(doc, level1, level2, child));
    return rcpp_result_gen;
END_RCPP
}
// unkgetXMLXPtr3
SEXP unkgetXMLXPtr3(XPtrXML doc, std::string level1, std::string child);
RcppExport SEXP _openxlsx2_unkgetXMLXPtr3(SEXP docSEXP, SEXP level1SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(unkgetXMLXPtr3(doc, level1, child));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr4
SEXP getXMLXPtr4(XPtrXML doc, std::string level1, std::string level2, std::string level3, std::string child);
RcppExport SEXP _openxlsx2_getXMLXPtr4(SEXP docSEXP, SEXP level1SEXP, SEXP level2SEXP, SEXP level3SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type level2(level2SEXP);
    Rcpp::traits::input_parameter< std::string >::type level3(level3SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr4(doc, level1, level2, level3, child));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr5
SEXP getXMLXPtr5(XPtrXML doc, std::string level1, std::string level2, std::string level3, std::string level4, std::string child);
RcppExport SEXP _openxlsx2_getXMLXPtr5(SEXP docSEXP, SEXP level1SEXP, SEXP level2SEXP, SEXP level3SEXP, SEXP level4SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type level2(level2SEXP);
    Rcpp::traits::input_parameter< std::string >::type level3(level3SEXP);
    Rcpp::traits::input_parameter< std::string >::type level4(level4SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr5(doc, level1, level2, level3, level4, child));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr1val
SEXP getXMLXPtr1val(XPtrXML doc, std::string child);
RcppExport SEXP _openxlsx2_getXMLXPtr1val(SEXP docSEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr1val(doc, child));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr2val
SEXP getXMLXPtr2val(XPtrXML doc, std::string level1, std::string child);
RcppExport SEXP _openxlsx2_getXMLXPtr2val(SEXP docSEXP, SEXP level1SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr2val(doc, level1, child));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr3val
SEXP getXMLXPtr3val(XPtrXML doc, std::string level1, std::string level2, std::string child);
RcppExport SEXP _openxlsx2_getXMLXPtr3val(SEXP docSEXP, SEXP level1SEXP, SEXP level2SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type level2(level2SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr3val(doc, level1, level2, child));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr4val
SEXP getXMLXPtr4val(XPtrXML doc, std::string level1, std::string level2, std::string level3, std::string child);
RcppExport SEXP _openxlsx2_getXMLXPtr4val(SEXP docSEXP, SEXP level1SEXP, SEXP level2SEXP, SEXP level3SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type level2(level2SEXP);
    Rcpp::traits::input_parameter< std::string >::type level3(level3SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr4val(doc, level1, level2, level3, child));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr5val
SEXP getXMLXPtr5val(XPtrXML doc, std::string level1, std::string level2, std::string level3, std::string level4, std::string child);
RcppExport SEXP _openxlsx2_getXMLXPtr5val(SEXP docSEXP, SEXP level1SEXP, SEXP level2SEXP, SEXP level3SEXP, SEXP level4SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type level2(level2SEXP);
    Rcpp::traits::input_parameter< std::string >::type level3(level3SEXP);
    Rcpp::traits::input_parameter< std::string >::type level4(level4SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr5val(doc, level1, level2, level3, level4, child));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr1attr
SEXP getXMLXPtr1attr(XPtrXML doc, std::string child);
RcppExport SEXP _openxlsx2_getXMLXPtr1attr(SEXP docSEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr1attr(doc, child));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr2attr
Rcpp::List getXMLXPtr2attr(XPtrXML doc, std::string level1, std::string child);
RcppExport SEXP _openxlsx2_getXMLXPtr2attr(SEXP docSEXP, SEXP level1SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr2attr(doc, level1, child));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr3attr
SEXP getXMLXPtr3attr(XPtrXML doc, std::string level1, std::string level2, std::string child);
RcppExport SEXP _openxlsx2_getXMLXPtr3attr(SEXP docSEXP, SEXP level1SEXP, SEXP level2SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type level2(level2SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr3attr(doc, level1, level2, child));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr4attr
Rcpp::List getXMLXPtr4attr(XPtrXML doc, std::string level1, std::string level2, std::string level3, std::string child);
RcppExport SEXP _openxlsx2_getXMLXPtr4attr(SEXP docSEXP, SEXP level1SEXP, SEXP level2SEXP, SEXP level3SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type level2(level2SEXP);
    Rcpp::traits::input_parameter< std::string >::type level3(level3SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr4attr(doc, level1, level2, level3, child));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr5attr
SEXP getXMLXPtr5attr(XPtrXML doc, std::string level1, std::string level2, std::string level3, std::string level4, std::string child);
RcppExport SEXP _openxlsx2_getXMLXPtr5attr(SEXP docSEXP, SEXP level1SEXP, SEXP level2SEXP, SEXP level3SEXP, SEXP level4SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type level2(level2SEXP);
    Rcpp::traits::input_parameter< std::string >::type level3(level3SEXP);
    Rcpp::traits::input_parameter< std::string >::type level4(level4SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr5attr(doc, level1, level2, level3, level4, child));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr1attr_one
Rcpp::CharacterVector getXMLXPtr1attr_one(XPtrXML doc, std::string child, std::string attrname);
RcppExport SEXP _openxlsx2_getXMLXPtr1attr_one(SEXP docSEXP, SEXP childSEXP, SEXP attrnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    Rcpp::traits::input_parameter< std::string >::type attrname(attrnameSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr1attr_one(doc, child, attrname));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr2attr_one
Rcpp::CharacterVector getXMLXPtr2attr_one(XPtrXML doc, std::string level1, std::string child, std::string attrname);
RcppExport SEXP _openxlsx2_getXMLXPtr2attr_one(SEXP docSEXP, SEXP level1SEXP, SEXP childSEXP, SEXP attrnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    Rcpp::traits::input_parameter< std::string >::type attrname(attrnameSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr2attr_one(doc, level1, child, attrname));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr3attr_one
Rcpp::CharacterVector getXMLXPtr3attr_one(XPtrXML doc, std::string level1, std::string level2, std::string child, std::string attrname);
RcppExport SEXP _openxlsx2_getXMLXPtr3attr_one(SEXP docSEXP, SEXP level1SEXP, SEXP level2SEXP, SEXP childSEXP, SEXP attrnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type level2(level2SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    Rcpp::traits::input_parameter< std::string >::type attrname(attrnameSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr3attr_one(doc, level1, level2, child, attrname));
    return rcpp_result_gen;
END_RCPP
}
// getXMLXPtr4attr_one
SEXP getXMLXPtr4attr_one(XPtrXML doc, std::string level1, std::string level2, std::string level3, std::string child, std::string attrname);
RcppExport SEXP _openxlsx2_getXMLXPtr4attr_one(SEXP docSEXP, SEXP level1SEXP, SEXP level2SEXP, SEXP level3SEXP, SEXP childSEXP, SEXP attrnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type level1(level1SEXP);
    Rcpp::traits::input_parameter< std::string >::type level2(level2SEXP);
    Rcpp::traits::input_parameter< std::string >::type level3(level3SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    Rcpp::traits::input_parameter< std::string >::type attrname(attrnameSEXP);
    rcpp_result_gen = Rcpp::wrap(getXMLXPtr4attr_one(doc, level1, level2, level3, child, attrname));
    return rcpp_result_gen;
END_RCPP
}
// font_val
SEXP font_val(Rcpp::CharacterVector fonts, std::string level3, std::string child);
RcppExport SEXP _openxlsx2_font_val(SEXP fontsSEXP, SEXP level3SEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type fonts(fontsSEXP);
    Rcpp::traits::input_parameter< std::string >::type level3(level3SEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(font_val(fonts, level3, child));
    return rcpp_result_gen;
END_RCPP
}
// style_xml_as_list
SEXP style_xml_as_list(Rcpp::CharacterVector xml_input, std::string level3);
RcppExport SEXP _openxlsx2_style_xml_as_list(SEXP xml_inputSEXP, SEXP level3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type xml_input(xml_inputSEXP);
    Rcpp::traits::input_parameter< std::string >::type level3(level3SEXP);
    rcpp_result_gen = Rcpp::wrap(style_xml_as_list(xml_input, level3));
    return rcpp_result_gen;
END_RCPP
}
// printXPtr
std::string printXPtr(XPtrXML doc, bool raw);
RcppExport SEXP _openxlsx2_printXPtr(SEXP docSEXP, SEXP rawSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrXML >::type doc(docSEXP);
    Rcpp::traits::input_parameter< bool >::type raw(rawSEXP);
    rcpp_result_gen = Rcpp::wrap(printXPtr(doc, raw));
    return rcpp_result_gen;
END_RCPP
}
// write_xml_file
void write_xml_file(std::string xml_content, std::string fl);
RcppExport SEXP _openxlsx2_write_xml_file(SEXP xml_contentSEXP, SEXP flSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type xml_content(xml_contentSEXP);
    Rcpp::traits::input_parameter< std::string >::type fl(flSEXP);
    write_xml_file(xml_content, fl);
    return R_NilValue;
END_RCPP
}
// calc_number_rows
int calc_number_rows(Rcpp::CharacterVector x, bool skipEmptyRows);
RcppExport SEXP _openxlsx2_calc_number_rows(SEXP xSEXP, SEXP skipEmptyRowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type skipEmptyRows(skipEmptyRowsSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_number_rows(x, skipEmptyRows));
    return rcpp_result_gen;
END_RCPP
}
// set_sst
Rcpp::CharacterVector set_sst(Rcpp::CharacterVector sharedStrings);
RcppExport SEXP _openxlsx2_set_sst(SEXP sharedStringsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type sharedStrings(sharedStringsSEXP);
    rcpp_result_gen = Rcpp::wrap(set_sst(sharedStrings));
    return rcpp_result_gen;
END_RCPP
}
// list_to_attr
std::string list_to_attr(Rcpp::List attributes, std::string node);
RcppExport SEXP _openxlsx2_list_to_attr(SEXP attributesSEXP, SEXP nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type attributes(attributesSEXP);
    Rcpp::traits::input_parameter< std::string >::type node(nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(list_to_attr(attributes, node));
    return rcpp_result_gen;
END_RCPP
}
// list_to_attr_full
std::string list_to_attr_full(Rcpp::List attributes, std::string node, std::string child);
RcppExport SEXP _openxlsx2_list_to_attr_full(SEXP attributesSEXP, SEXP nodeSEXP, SEXP childSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type attributes(attributesSEXP);
    Rcpp::traits::input_parameter< std::string >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< std::string >::type child(childSEXP);
    rcpp_result_gen = Rcpp::wrap(list_to_attr_full(attributes, node, child));
    return rcpp_result_gen;
END_RCPP
}
// map_cell_types_to_integer
Rcpp::IntegerVector map_cell_types_to_integer(Rcpp::CharacterVector t);
RcppExport SEXP _openxlsx2_map_cell_types_to_integer(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(map_cell_types_to_integer(t));
    return rcpp_result_gen;
END_RCPP
}
// map_cell_types_to_char
Rcpp::CharacterVector map_cell_types_to_char(Rcpp::IntegerVector t);
RcppExport SEXP _openxlsx2_map_cell_types_to_char(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(map_cell_types_to_char(t));
    return rcpp_result_gen;
END_RCPP
}
// build_cell_types_integer
Rcpp::IntegerVector build_cell_types_integer(Rcpp::CharacterVector classes, int n_rows);
RcppExport SEXP _openxlsx2_build_cell_types_integer(SEXP classesSEXP, SEXP n_rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< int >::type n_rows(n_rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(build_cell_types_integer(classes, n_rows));
    return rcpp_result_gen;
END_RCPP
}
// buildCellTypes
Rcpp::CharacterVector buildCellTypes(Rcpp::CharacterVector classes, int nRows);
RcppExport SEXP _openxlsx2_buildCellTypes(SEXP classesSEXP, SEXP nRowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< int >::type nRows(nRowsSEXP);
    rcpp_result_gen = Rcpp::wrap(buildCellTypes(classes, nRows));
    return rcpp_result_gen;
END_RCPP
}
// build_cell_merges
Rcpp::List build_cell_merges(Rcpp::List comps);
RcppExport SEXP _openxlsx2_build_cell_merges(SEXP compsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type comps(compsSEXP);
    rcpp_result_gen = Rcpp::wrap(build_cell_merges(comps));
    return rcpp_result_gen;
END_RCPP
}
// buildCellList
Rcpp::List buildCellList(Rcpp::CharacterVector r, Rcpp::CharacterVector t, Rcpp::CharacterVector v);
RcppExport SEXP _openxlsx2_buildCellList(SEXP rSEXP, SEXP tSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(buildCellList(r, t, v));
    return rcpp_result_gen;
END_RCPP
}
// set_row
std::string set_row(Rcpp::DataFrame row_attr, Rcpp::List cells, size_t row_idx);
RcppExport SEXP _openxlsx2_set_row(SEXP row_attrSEXP, SEXP cellsSEXP, SEXP row_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type row_attr(row_attrSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cells(cellsSEXP);
    Rcpp::traits::input_parameter< size_t >::type row_idx(row_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(set_row(row_attr, cells, row_idx));
    return rcpp_result_gen;
END_RCPP
}
// write_worksheet_xml_2
SEXP write_worksheet_xml_2(std::string prior, std::string post, Rcpp::Reference sheet_data, Rcpp::CharacterVector cols_attr, std::string R_fileName);
RcppExport SEXP _openxlsx2_write_worksheet_xml_2(SEXP priorSEXP, SEXP postSEXP, SEXP sheet_dataSEXP, SEXP cols_attrSEXP, SEXP R_fileNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< std::string >::type post(postSEXP);
    Rcpp::traits::input_parameter< Rcpp::Reference >::type sheet_data(sheet_dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type cols_attr(cols_attrSEXP);
    Rcpp::traits::input_parameter< std::string >::type R_fileName(R_fileNameSEXP);
    rcpp_result_gen = Rcpp::wrap(write_worksheet_xml_2(prior, post, sheet_data, cols_attr, R_fileName));
    return rcpp_result_gen;
END_RCPP
}
// buildMatrixNumeric
SEXP buildMatrixNumeric(Rcpp::CharacterVector v, Rcpp::IntegerVector rowInd, Rcpp::IntegerVector colInd, Rcpp::CharacterVector colNames, int nRows, int nCols);
RcppExport SEXP _openxlsx2_buildMatrixNumeric(SEXP vSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP colNamesSEXP, SEXP nRowsSEXP, SEXP nColsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type colNames(colNamesSEXP);
    Rcpp::traits::input_parameter< int >::type nRows(nRowsSEXP);
    Rcpp::traits::input_parameter< int >::type nCols(nColsSEXP);
    rcpp_result_gen = Rcpp::wrap(buildMatrixNumeric(v, rowInd, colInd, colNames, nRows, nCols));
    return rcpp_result_gen;
END_RCPP
}
// buildMatrixMixed
SEXP buildMatrixMixed(Rcpp::CharacterVector v, Rcpp::IntegerVector rowInd, Rcpp::IntegerVector colInd, Rcpp::CharacterVector colNames, int nRows, int nCols, Rcpp::IntegerVector charCols, Rcpp::IntegerVector dateCols);
RcppExport SEXP _openxlsx2_buildMatrixMixed(SEXP vSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP colNamesSEXP, SEXP nRowsSEXP, SEXP nColsSEXP, SEXP charColsSEXP, SEXP dateColsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type colNames(colNamesSEXP);
    Rcpp::traits::input_parameter< int >::type nRows(nRowsSEXP);
    Rcpp::traits::input_parameter< int >::type nCols(nColsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type charCols(charColsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dateCols(dateColsSEXP);
    rcpp_result_gen = Rcpp::wrap(buildMatrixMixed(v, rowInd, colInd, colNames, nRows, nCols, charCols, dateCols));
    return rcpp_result_gen;
END_RCPP
}
// matrixRowInds
Rcpp::IntegerVector matrixRowInds(Rcpp::IntegerVector indices);
RcppExport SEXP _openxlsx2_matrixRowInds(SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(matrixRowInds(indices));
    return rcpp_result_gen;
END_RCPP
}
// build_table_xml
Rcpp::CharacterVector build_table_xml(std::string table, std::string tableStyleXML, std::string ref, std::vector<std::string> colNames, bool showColNames, bool withFilter);
RcppExport SEXP _openxlsx2_build_table_xml(SEXP tableSEXP, SEXP tableStyleXMLSEXP, SEXP refSEXP, SEXP colNamesSEXP, SEXP showColNamesSEXP, SEXP withFilterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type table(tableSEXP);
    Rcpp::traits::input_parameter< std::string >::type tableStyleXML(tableStyleXMLSEXP);
    Rcpp::traits::input_parameter< std::string >::type ref(refSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type colNames(colNamesSEXP);
    Rcpp::traits::input_parameter< bool >::type showColNames(showColNamesSEXP);
    Rcpp::traits::input_parameter< bool >::type withFilter(withFilterSEXP);
    rcpp_result_gen = Rcpp::wrap(build_table_xml(table, tableStyleXML, ref, colNames, showColNames, withFilter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_openxlsx2_readXML", (DL_FUNC) &_openxlsx2_readXML, 2},
    {"_openxlsx2_getXML1", (DL_FUNC) &_openxlsx2_getXML1, 2},
    {"_openxlsx2_getXML1val", (DL_FUNC) &_openxlsx2_getXML1val, 2},
    {"_openxlsx2_getXML2", (DL_FUNC) &_openxlsx2_getXML2, 3},
    {"_openxlsx2_getXML2val", (DL_FUNC) &_openxlsx2_getXML2val, 3},
    {"_openxlsx2_getXML3", (DL_FUNC) &_openxlsx2_getXML3, 4},
    {"_openxlsx2_getXML3val", (DL_FUNC) &_openxlsx2_getXML3val, 4},
    {"_openxlsx2_getXMLattr", (DL_FUNC) &_openxlsx2_getXMLattr, 2},
    {"_openxlsx2_getXML1attr_one", (DL_FUNC) &_openxlsx2_getXML1attr_one, 3},
    {"_openxlsx2_calc_column_widths", (DL_FUNC) &_openxlsx2_calc_column_widths, 7},
    {"_openxlsx2_convert_to_excel_ref", (DL_FUNC) &_openxlsx2_convert_to_excel_ref, 2},
    {"_openxlsx2_convert_from_excel_ref", (DL_FUNC) &_openxlsx2_convert_from_excel_ref, 1},
    {"_openxlsx2_convert_to_excel_ref_expand", (DL_FUNC) &_openxlsx2_convert_to_excel_ref_expand, 3},
    {"_openxlsx2_isInternalHyperlink", (DL_FUNC) &_openxlsx2_isInternalHyperlink, 1},
    {"_openxlsx2_cppReadFile", (DL_FUNC) &_openxlsx2_cppReadFile, 1},
    {"_openxlsx2_read_file_newline", (DL_FUNC) &_openxlsx2_read_file_newline, 1},
    {"_openxlsx2_get_letters", (DL_FUNC) &_openxlsx2_get_letters, 0},
    {"_openxlsx2_markUTF8", (DL_FUNC) &_openxlsx2_markUTF8, 2},
    {"_openxlsx2_loadvals", (DL_FUNC) &_openxlsx2_loadvals, 2},
    {"_openxlsx2_si_to_txt", (DL_FUNC) &_openxlsx2_si_to_txt, 1},
    {"_openxlsx2_is_to_txt", (DL_FUNC) &_openxlsx2_is_to_txt, 1},
    {"_openxlsx2_long_to_wide", (DL_FUNC) &_openxlsx2_long_to_wide, 4},
    {"_openxlsx2_getOpenClosedNode", (DL_FUNC) &_openxlsx2_getOpenClosedNode, 3},
    {"_openxlsx2_getAttr", (DL_FUNC) &_openxlsx2_getAttr, 2},
    {"_openxlsx2_get_extLst_Major", (DL_FUNC) &_openxlsx2_get_extLst_Major, 1},
    {"_openxlsx2_cell_ref_to_col", (DL_FUNC) &_openxlsx2_cell_ref_to_col, 1},
    {"_openxlsx2_int_2_cell_ref", (DL_FUNC) &_openxlsx2_int_2_cell_ref, 1},
    {"_openxlsx2_readXMLPtr", (DL_FUNC) &_openxlsx2_readXMLPtr, 2},
    {"_openxlsx2_getXMLXPtr1", (DL_FUNC) &_openxlsx2_getXMLXPtr1, 2},
    {"_openxlsx2_getXMLXPtr2", (DL_FUNC) &_openxlsx2_getXMLXPtr2, 3},
    {"_openxlsx2_getXMLXPtr3", (DL_FUNC) &_openxlsx2_getXMLXPtr3, 4},
    {"_openxlsx2_unkgetXMLXPtr3", (DL_FUNC) &_openxlsx2_unkgetXMLXPtr3, 3},
    {"_openxlsx2_getXMLXPtr4", (DL_FUNC) &_openxlsx2_getXMLXPtr4, 5},
    {"_openxlsx2_getXMLXPtr5", (DL_FUNC) &_openxlsx2_getXMLXPtr5, 6},
    {"_openxlsx2_getXMLXPtr1val", (DL_FUNC) &_openxlsx2_getXMLXPtr1val, 2},
    {"_openxlsx2_getXMLXPtr2val", (DL_FUNC) &_openxlsx2_getXMLXPtr2val, 3},
    {"_openxlsx2_getXMLXPtr3val", (DL_FUNC) &_openxlsx2_getXMLXPtr3val, 4},
    {"_openxlsx2_getXMLXPtr4val", (DL_FUNC) &_openxlsx2_getXMLXPtr4val, 5},
    {"_openxlsx2_getXMLXPtr5val", (DL_FUNC) &_openxlsx2_getXMLXPtr5val, 6},
    {"_openxlsx2_getXMLXPtr1attr", (DL_FUNC) &_openxlsx2_getXMLXPtr1attr, 2},
    {"_openxlsx2_getXMLXPtr2attr", (DL_FUNC) &_openxlsx2_getXMLXPtr2attr, 3},
    {"_openxlsx2_getXMLXPtr3attr", (DL_FUNC) &_openxlsx2_getXMLXPtr3attr, 4},
    {"_openxlsx2_getXMLXPtr4attr", (DL_FUNC) &_openxlsx2_getXMLXPtr4attr, 5},
    {"_openxlsx2_getXMLXPtr5attr", (DL_FUNC) &_openxlsx2_getXMLXPtr5attr, 6},
    {"_openxlsx2_getXMLXPtr1attr_one", (DL_FUNC) &_openxlsx2_getXMLXPtr1attr_one, 3},
    {"_openxlsx2_getXMLXPtr2attr_one", (DL_FUNC) &_openxlsx2_getXMLXPtr2attr_one, 4},
    {"_openxlsx2_getXMLXPtr3attr_one", (DL_FUNC) &_openxlsx2_getXMLXPtr3attr_one, 5},
    {"_openxlsx2_getXMLXPtr4attr_one", (DL_FUNC) &_openxlsx2_getXMLXPtr4attr_one, 6},
    {"_openxlsx2_font_val", (DL_FUNC) &_openxlsx2_font_val, 3},
    {"_openxlsx2_style_xml_as_list", (DL_FUNC) &_openxlsx2_style_xml_as_list, 2},
    {"_openxlsx2_printXPtr", (DL_FUNC) &_openxlsx2_printXPtr, 2},
    {"_openxlsx2_write_xml_file", (DL_FUNC) &_openxlsx2_write_xml_file, 2},
    {"_openxlsx2_calc_number_rows", (DL_FUNC) &_openxlsx2_calc_number_rows, 2},
    {"_openxlsx2_set_sst", (DL_FUNC) &_openxlsx2_set_sst, 1},
    {"_openxlsx2_list_to_attr", (DL_FUNC) &_openxlsx2_list_to_attr, 2},
    {"_openxlsx2_list_to_attr_full", (DL_FUNC) &_openxlsx2_list_to_attr_full, 3},
    {"_openxlsx2_map_cell_types_to_integer", (DL_FUNC) &_openxlsx2_map_cell_types_to_integer, 1},
    {"_openxlsx2_map_cell_types_to_char", (DL_FUNC) &_openxlsx2_map_cell_types_to_char, 1},
    {"_openxlsx2_build_cell_types_integer", (DL_FUNC) &_openxlsx2_build_cell_types_integer, 2},
    {"_openxlsx2_buildCellTypes", (DL_FUNC) &_openxlsx2_buildCellTypes, 2},
    {"_openxlsx2_build_cell_merges", (DL_FUNC) &_openxlsx2_build_cell_merges, 1},
    {"_openxlsx2_buildCellList", (DL_FUNC) &_openxlsx2_buildCellList, 3},
    {"_openxlsx2_set_row", (DL_FUNC) &_openxlsx2_set_row, 3},
    {"_openxlsx2_write_worksheet_xml_2", (DL_FUNC) &_openxlsx2_write_worksheet_xml_2, 5},
    {"_openxlsx2_buildMatrixNumeric", (DL_FUNC) &_openxlsx2_buildMatrixNumeric, 6},
    {"_openxlsx2_buildMatrixMixed", (DL_FUNC) &_openxlsx2_buildMatrixMixed, 8},
    {"_openxlsx2_matrixRowInds", (DL_FUNC) &_openxlsx2_matrixRowInds, 1},
    {"_openxlsx2_build_table_xml", (DL_FUNC) &_openxlsx2_build_table_xml, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_openxlsx2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
